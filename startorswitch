#!/usr/bin/env ruby
require 'redis'

module StartOrSwitch

  def self.find_id_or_start_application(name)
    existing = `xdotool search --name #{name}`
    spawn name if existing.empty?
    (0..5).each do
      id = `xdotool search --name #{name}`
      if !id.empty?
        ids = id.split("\n")
        return ids[0].strip if ids.count > 0
      end
      sleep 1
    end
  end

  module WMIntegration
    def show(node_id)
      `bspc node #{node_id} --flag hidden=off --flag sticky; bspc node -f #{node_id}`
    end

    def hide_id(node_id)
      `bspc node #{node_id} --flag hidden=on --flag sticky`
    end

    def still_alive?(node_id)
      current_nodes = `bspc query -N`
      parsed_nodes = current_nodes.split("\n").map { |i| i.to_i(16) }
      parsed_nodes.include?(node_id.to_i)
    end

    def focus_id(node_id)
      `bspc node -f #{node_id}`
    end

    def focused_id?(node_id)
      focused = focused_id
      puts "node_id: #{node_id}, focused: #{focused}"
      focused == node_id
    end

    def focused_id
      res = `bspc query -N -n`
      res.strip
    end
  end

  class StateManagement
    def initialize
      @redis = Redis.current
    end

    def id(name)
      @redis.hget('tracked', name)
    end

    def store_id(name, id)
      @redis.hset('tracked', name, id)
    end

    def destroy_id(name)
      id = @redis.hget('tracked', name)
      @redis.hdel('tracked', name)
      @redis.hdel('state', id)
    end

    def set_state(name, state)
      @redis.hset('state', id(name), state.to_s)
      state
    end

    def latest_shown(name = nil)
      if name != nil
        @redis.zadd(:latest, Time.now.to_i, name)
      else
        @redis.zrevrange(:latest, 0, 0)
      end
    end

    def latest_count
      @redis.zcount(:latest, -Float::INFINITY, Float::INFINITY)
    end

    def latest_empty?
      latest_count&.zero?
    end

    def remove_from_latest(name)
      @redis.zrem(:latest, name)
    end


    def state_for(id:)
      state = @redis.hget('state', id)
      found_state = %I(visible not_visible).find { |s| state == s.to_s }
      return found_state if found_state != nil
      :visible
    end

    def tracked?(name)
      found = id(name)
      !found.nil? && found != ''
    end

    def save_current(name, type, focused_id)
      case type
      when :focused
        current = focused_id
      when :application
        current = StartOrSwitch.find_id_or_start_application(name)
      end
      store_id(name, current)
    end

    def store_prev_id(id)
      @redis.hset('tracked', 'prev', id)
    end

    def load_prev_id
      @redis.hget('tracked', 'prev')
    end

    def all_hidden
      hidden = []
      all_tracked.each do |name, id|
        hidden << { name: name, id: id } if state_for(id: id) == :not_visible
      end
      hidden
    end

    def reset_all
      @redis.del('tracked')
      @redis.del('state')
    end

    def all_tracked
      @redis.hgetall('tracked')
    end

  end

  class Tracked
    include WMIntegration

    attr_accessor :name

    def initialize(name:, type:, switch_to: false)
      @name = name
      @switch_to = switch_to
      @type = type
      @sm = StateManagement.new
    end

    def self.toggle_and_update(name:)
      Tracked.new(name: name, type: nil).toggle_and_update_state
    end

    def self.show_and_update(name:)
      Tracked.new(name: name, type: nil).show_and_update_state
    end

    def self.hide_and_update(name:)
      Tracked.new(name: name, type: nil).hide_and_update_state
    end

    def id
      @sm.id(@name)
    end

    def state
      @sm.state_for(id: id)
    end

    def setup_tracking
      if @type == :application &&
         tracked? &&
         !still_alive?(id)
        destroy
      end
      return if tracked?
      @sm.save_current(@name, @type, focused_id)
    end

    def destroy
      @sm.destroy_id(@name)
    end

    def hide
      @sm.remove_from_latest(@name) unless @sm.latest_count == 1
      hide_id(id)
    end

    def tracked?
      @sm.tracked?(@name)
    end

    def set_state(state)
      @sm.set_state(@name, state)
    end

    def hide_and_update_state
      hide
      set_state(:not_visible)
    end

    def show_and_update_state
      show(id)
      @sm.latest_shown(@name)
      set_state(:visible)
    end

    def focus
      focus_id(id)
    end

    def focused?
      focused_id?(id)
    end

    def show_or_hide(previous = @sm.load_prev_id)
      case state
      when :visible
        if @switch_to && !focused?
          focus
        else
          hide_and_update_state
          focus_id(previous)
        end
      when :not_visible
        @sm.store_prev_id(focused_id)
        show_and_update_state
      end
    end
    alias :toggle_and_update_state show_or_hide

  end

  class Manager
    include WMIntegration

    def initialize
      @redis = Redis.new
      @sm = StateManagement.new
    end

    def go
      if ARGV.count == 0
        puts 'need a name'
        return
      end
      if ARGV.count == 1 && ARGV[0] == 'r'
        return @sm.reset_all
      end
      case ARGV[0]
      when 'f'
        @type = :focused
      when 'a'
        @type = :application
      when 'c'
        @type = :clean
      when 'h'
        @type = :hide
        return hide_tracked_focused
      when 'hl'
        @type = :hide_latest
        return hide_or_show_latest
      when 'ha'
        @type = :hide_all
        return hide_all_tracked
      when 's'
        @type = :show_all
        return show_all_hidden
      end
      name = nil
      if ARGV.length > 1
        name = ARGV[1]
        @options = ARGV[2..-1]
        @switch_to = @options.join(' ').include?('switch_to')
      end
      tracked = Tracked.new(name: name, switch_to: @switch_to, type: @type)
      if @type == :clean
        tracked.destroy 
        return true
      end
      tracked.setup_tracking
      tracked.show_or_hide
      handle_options(tracked.state, tracked.id)
    end

    def handle_options(state, node_id)
      if @options.count > 0
        @options.each do |o|
          key, value = o.split('=')
          case key
          when 'top_padding'
            case state
            when :visible
              `bspc config -m HDMI-1-1 top_padding 0`
            when :not_visible
              `bspc config -m HDMI-1-1 top_padding #{value}`
            end
          when 'switch_to'
            @switch_to = true
          when 'mods'
            value.split(',').each do |mod|
              case mod
              when 'sticky'
                `bspc node #{node_id} --flag sticky`
              end
            end
          end
        end
      end
    end

    def reset_all
      @sm.reset_all
    end

    def all_hidden
      all_tracked.select { |t| t.state == :not_visible }
    end

    def show_all_hidden
      all_hidden.each do |t|
        t.show_and_update_state
      end
    end

    def all_tracked
      @sm.all_tracked.map { |name, id| Tracked.new(name: name, type: @type, switch_to: @switch_to) }
    end

    def hide_all_tracked
      all_tracked.each do |tracked|
        next if tracked.name == 'prev'
        tracked.hide_and_update_state
      end
    end

    def hide_or_show_latest
      Tracked.toggle_and_update(name: @sm.latest_shown)
    end

    def hide_latest
      Tracked.hide_and_update(name: @sm.latest_shown)
    end

    def show_latest
      Tracked.show_and_update(name: @sm.latest_shown)
    end

    def hide_tracked_focused
      focused = focused_id
      found = all_tracked.find { |tracked| tracked.id == focused }
      return if found == nil || found.name == 'prev'
      found.hide_and_update_state if found.name != nil
    end
  end

end

sos = StartOrSwitch::Manager.new
sos.go
